// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey_Feedback_App.Infastructor.Context;

#nullable disable

namespace Survey_Feedback_App.Migrations
{
    [DbContext(typeof(SurveyFeedbackContext))]
    partial class SurveyFeedbackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UsersUnregId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("option")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("QuestionId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ResponseId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SurveyId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TmeCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UsersRegId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("SurveyId");

                    b.HasIndex("UserEmail");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.UsersReg", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UsersRegId")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.ToTable("UsersRegs");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.UsersUnreg", b =>
                {
                    b.Property<int>("UsersUnregId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UsersUnregId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UsersUnregId");

                    b.ToTable("UsersUnregs");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Survey_Feedback_App.Core.Domain.Entities.Survey", "Surveys")
                        .WithMany("Feedbacks")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Question", b =>
                {
                    b.HasOne("Survey_Feedback_App.Core.Domain.Entities.Feedback", null)
                        .WithMany("Questions")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("Survey_Feedback_App.Core.Domain.Entities.Survey", null)
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Response", b =>
                {
                    b.HasOne("Survey_Feedback_App.Core.Domain.Entities.Feedback", null)
                        .WithMany("Responses")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_Feedback_App.Core.Domain.Entities.Question", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Survey", b =>
                {
                    b.HasOne("Survey_Feedback_App.Core.Domain.Entities.UsersReg", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Survey_Feedback_App.Core.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
